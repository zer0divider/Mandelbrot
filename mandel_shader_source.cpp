const char * MANDEL_VERTEX_SHADER = 
	"#version 130\n"
	"in vec2 vertex;\n"
	"void main(void){\n"
	"  gl_Position = vec4(vertex, 0, 1);\n"
	"\n"
	"}"
;

const char * MANDEL_FRAGMENT_SHADER = 
	"#version 130\n"
	"out vec4 color;\n"
	"uniform int max_iterations;\n"
	"uniform mat3 transform;\n"
	"uniform vec2 window_size;\n"
	"uniform vec2 julia_c;\n"
	"uniform int julia = 0;\n"
	"uniform sampler1D color_map;\n"
	"vec2 mandel_iterate(vec2 z, vec2 c){\n"
	"  return vec2(z.x*z.x - z.y*z.y + c.x, 2*z.x*z.y + c.y);\n"
	"}\n"
	"float len(vec2 v){return sqrt(v.x*v.x + v.y*v.y);}\n"
	"void main(void){\n"
	"  vec2 normalized_window_coords = vec2(2*gl_FragCoord.x/window_size.x-1, 2*gl_FragCoord.y/window_size.y-1);\n"
	"  normalized_window_coords = (transform*vec3(normalized_window_coords, 1)).xy;\n"
	"  float s = 1;"
	"  if(julia == 0){\n"
	"  vec2 z = vec2(0,0);\n"
	"  for(int i = 0; i < max_iterations; i++){\n"
	"    if(len(z) >= 2.0){s = float(i)/float(max_iterations-1); break;}\n"
	"    z = mandel_iterate(z, normalized_window_coords);\n"
	"  }\n"
	"  }else{\n"
	"  vec2 z = normalized_window_coords;\n"
	"  for(int i = 0; i < max_iterations; i++){\n"
	"    if(len(z) >= 2.0){s = float(i)/float(max_iterations-1); break;}\n"
	"    z = mandel_iterate(z, julia_c);\n"
	"  }\n"
	"  }\n"
	"  color = texture(color_map, s);\n"
	"}"
;

// double precision
const char * MANDEL_FRAGMENT_SHADER_DOUBLE = 
	"#version 400\n"
	"out vec4 color;\n"
	"uniform int max_iterations;\n"
	"uniform dmat3 transform;\n"
	"uniform vec2 window_size;\n"
	"uniform dvec2 julia_c;\n"
	"uniform int julia = 0;\n"
	"uniform sampler1D color_map;\n"
	"dvec2 mandel_iterate(dvec2 z, dvec2 c){\n"
	"  return dvec2(z.x*z.x - z.y*z.y + c.x, 2*z.x*z.y + c.y);\n"
	"}\n"
	"double len(dvec2 v){return sqrt(v.x*v.x + v.y*v.y);}\n"
	"void main(void){\n"
	"  dvec2 normalized_window_coords = dvec2(2*gl_FragCoord.x/window_size.x-1, 2*gl_FragCoord.y/window_size.y-1);\n"
	"  normalized_window_coords = (transform*dvec3(normalized_window_coords, 1)).xy;\n"
	"  float s = 1;"
	"  if(julia == 0){\n"
	"  dvec2 z = dvec2(0,0);\n"
	"  for(int i = 0; i < max_iterations; i++){\n"
	"    if(len(z) >= 2.0){s = float(i)/float(max_iterations-1); break;}\n"
	"    z = mandel_iterate(z, normalized_window_coords);\n"
	"  }\n"
	"  }else{\n"
	"  dvec2 z = normalized_window_coords;\n"
	"  for(int i = 0; i < max_iterations; i++){\n"
	"    if(len(z) >= 2.0){s = float(i)/float(max_iterations-1); break;}\n"
	"    z = mandel_iterate(z, julia_c);\n"
	"  }\n"
	"  }\n"
	"  color = texture(color_map, s);\n"
	"}"
;
